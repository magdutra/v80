ÓIODVR °°°±° ;	IODVR/ASM°°°²° DISPLY	LD	HL,DISPRET	;RETURN ADDRESS°°°³° 	EX	(SP),HL		;GET DATA POINTER FROM ST°°°´° PRINT	LD	A,(HL)		;GET BYTE FROM STRING°°°µ° 	INC	HL		;BUMP STRING POINTER°°°¶° 	CP	3		;TERMINATOR°°°·° 	RET	Z°°°¸° 	CALL	VOUT		;OUTPUT TO VIDEO°°°¹° 	CP	0DH		;TERMINATOR ?°°±°° 	RET	Z°°±±° 	JR	PRINT		;GO SOME MORE°°±²° DISPRET	JP	(HL)		;GO TO BYTE AFTER TERM.°°±³° GETSTR	LD	DE,3C00H°°±´° CURSOR	EQU	$-2°°±µ° 	LD	HL,STRING°°±¶° 	LD	C,0°°±·° GETST1	LD	(CURSOR),DE°°±¸° 	CALL	KISCAN°°±¹° 	CP	1°°²°° 	JP	Z,ENTRY°°²±° 	CP	13°°²²° 	JR	Z,GETST2°°²³° 	CP	8°°²´° 	JR	Z,GETST3°°²µ° 	EX	AF,AF'°°²¶° 	LD	A,B°°²·° 	CP	C°°²¸° 	JR	Z,GETST1°°²¹° 	EX	AF,AF'°°³°° 	LD	(HL),A°°³±° 	LD	(DE),A°°³²° 	INC	DE°°³³° 	INC	HL°°³´° 	INC	C°°³µ° 	LD	A,143°°³¶° 	LD	(DE),A°°³·° 	JR	GETST1°°³¸° GETST2	LD	(HL),13°°³¹° 	LD	A,20H°°´°° 	LD	(DE),A°°´±° 	LD	HL,STRING°°´²° 	LD	B,C°°´³° 	LD	A,C°°´´° 	OR	A°°´µ° 	LD	A,(HL)°°´¶° 	RET°°´·° GETST3	LD	A,C°°´¸° 	OR	A°°´¹° 	JR	Z,GETST1°°µ°° 	LD	A,20H°°µ±° 	LD	(HL),A°°µ²° 	LD	(DE),A°°µ³° 	DEC	HL°°µ´° 	DEC	DE°°µµ° 	DEC	C°°µ¶° 	JR	GETST1°°µ·° VOUT	PUSH	HL°°µ¸° 	LD	HL,(CURSOR)	;GET CURSOR POSITION°°µ¹° 	CP	20H		;CONTROL BYTE ?°°¶°° 	JR	C,GOCTL		;DO CONTROL IF <20H°°¶±° CTLRET	LD	(HL),A		;PUT ON VIDEO°°¶²° 	INC	HL		;BUMP CURSOR°°¶³° VDONE	LD	(CURSOR),HL°°¶´° 	PUSH	AF°°¶µ° 	LD	A,H°°¶¶° 	CP	3CH°°¶·° 	CALL	C,NEWCUR°°¶¸° 	LD	A,H°°¶¹° 	CP	40H°°·°° 	CALL	NC,SCROLL°°·±° 	LD	(CURSOR),HL°°·²° 	POP	AF°°·³° 	POP	HL°°·´° 	RET°°·µ° NEWCUR	LD	HL,3D00H°°·¶° VIDTOP	EQU	$-2°°··° 	RET°°·¸° GOCTL	CP	0DH		;CARRIAGE RETURN ?°°·¹° 	JR	Z,LINFED	;DO IT°°¸°° 	CP	10°°¸±° 	JR	Z,LINFED°°¸²° 	CP	1CH		;HOME CURSOR ?°°¸³° 	JR	Z,HOME°°¸´° 	CP	1FH		;CLEAR ?°°¸µ° 	JR	Z,CLEAR°°¸¶° 	CP	1DH		;BEGIN LINE°°¸·° 	JR	Z,BLINE°°¸¸° 	CP	1EH		;ERASE LINE°°¸¹° 	JR	Z,ERASE°°¹°° 	LD	A,5DH		;UNDEFINED BYTE DISPLY°°¹±° 	JR	CTLRET		;CONTINUE°°¹²° LINFED	PUSH	DE		;SAVE DE°°¹³° 	LD	DE,40H		;ONE LINE DOWN°°¹´° 	PUSH	AF		;SAVE CHAR°°¹µ° 	LD	A,L		;GET LSB°°¹¶° 	AND	0C0H		;START OF LINE°°¹·° 	LD	L,A		;PUT IT BACK°°¹¸° 	POP	AF		;RESTORE AF°°¹¹° 	ADD	HL,DE		;DROP DOWN A LINE°±°°° 	POP	DE		;RESTORE DE°±°±° 	JR	VDONE		;FINISHED°±°²° HOME	LD	HL,(VIDTOP)°±°³° 	JR	VDONE°±°´° CLEAR	PUSH	AF		;SAVE CHARACTER°±°µ° 	PUSH	DE		;SAVE DE°±°¶° 	EX	DE,HL		;DE=CURSOR°±°·° 	LD	HL,4000H	;END OF SCREEN°±°¸° CLICO	OR	A		;CLEAR CARRY°±°¹° 	SBC	HL,DE		;# BYTES TO MOVE°±±°° 	EX	DE,HL		;HL=CURSOR,DE=NUMBER°±±±° 	PUSH	HL		;SAVE CURSOR°±±²° CLINE	LD	(HL),20H	;PUT A SPACE°±±³° 	DEC	DE		;LESS COUNT°±±´° 	INC	HL°±±µ° 	LD	A,D°±±¶° 	OR	E		;ANY BITS LEFT ON ?°±±·° 	JR	NZ,CLINE	;CONTINUE°±±¸° 	POP	HL		;RESTORE°±±¹° 	POP	DE°±²°° 	POP	AF°±²±° 	JP	VDONE		;GO BACK°±²²° ERASE	PUSH	AF		;SAVE BYTE°±²³° 	PUSH	DE°±²´° 	LD	A,L°±²µ° 	AND	0C0H		;PUT CURSOR AT BOL°±²¶° 	LD	L,A°±²·° 	EX	DE,HL		;DE=CURSOR°±²¸° 	LD	H,D		;GET MSB°±²¹° 	LD	A,E		;GET LSB°±³°° 	OR	3FH		;END OF LINE°±³±° 	LD	L,A°±³²° 	JR	CLICO		;CONTINUE°±³³° BLINE	PUSH	AF		;SAVE BYTE°±³´° 	LD	A,L		;GET LSB°±³µ° 	AND	0C0H		;BEGINNING OF LINE°±³¶° 	LD	L,A		;PUT IT BACK°±³·° 	POP	AF		;RESTORE BYTE°±³¸° 	JP	VDONE°±³¹° SCROLL	PUSH	BC°±´°° 	PUSH	DE°±´±° 	LD	DE,(VIDTOP)	;TOP LINE OF SCREEN°±´²° 	LD	HL,4000H	;END OF SCREEN°±´³° 	OR	A		;CLEAR CARRY°±´´° 	SBC	HL,DE		;SUBTRACT°±´µ° 	LD	DE,40H		;LESS ONE MORE LINE°±´¶° 	OR	A°±´·° 	SBC	HL,DE		;HL=LENGTH TO MOVE°±´¸° 	PUSH	HL°±´¹° 	POP	BC		;GIVE TO BC°±µ°° 	LD	HL,(VIDTOP)	;GET VIDEO TOP°±µ±° 	PUSH	HL		;SAVE FOR DE°±µ²° 	ADD	HL,DE		;DOWN ONE LINE°±µ³° 	POP	DE		;DE=TOPLINE/HL=DE+40H°±µ´° 	LDIR			;MOVE THE BYTES°±µµ° 	LD	HL,3FC0H°±µ¶° VIDBOT	EQU	$-2°±µ·° 	LD	B,40H		;ERASE IT°±µ¸° SCR2	LD	(HL),20H°±µ¹° 	INC	HL°±¶°° 	DJNZ	SCR2°±¶±° 	POP	DE		;RESTORE REGS°±¶²° 	POP	BC°±¶³° 	LD	HL,(VIDBOT)	;CURSOR TO BOTTOM°±¶´° 	RET			;DONE°±¶µ° START0	CALL	CLEARS°±¶¶° 	JP	START°±¶·° ENTRY0	CALL	CLEARS°±¶¸° 	JP	ENTRY°±¶¹° CLEARS	LD	A,1CH		;HOME CURSOR°±·°° 	CALL	VOUT		;PRINT IT°±·±° 	LD	A,1FH		;CLEAR TO EOF°±·²° 	CALL	VOUT		;DO IT°±·³° 	LD	A,4°±·´° 	RET°±·µ° UCASE	CP	60H°±·¶° 	RET	C°±··° 	AND	5FH°±·¸° 	RET°±·¹° KIMASK	DB	0,0,0,0,0,0,0	;keyboard work area-mask°±¸°° INKEY	LD	HL,KIMASK	;mask area°±¸±° 	LD	BC,3801H	;keyboard matrix°±¸²° 	LD	D,0		;row counter°±¸³° INL1	LD	A,(BC)		;get a byte°±¸´° 	LD	E,A		;save here°±¸µ° 	XOR	(HL)		;check with mask°±¸¶° 	LD	(HL),E		;save new key°±¸·° 	AND	E		;same as last time?°±¸¸° 	JR	NZ,INL2		;go if new key°±¸¹° 	INC	D		;bump row counter°±¹°° 	INC	L		;bump mask pointer°±¹±° 	RLC	C		;point to next row°±¹²° 	JP	P,INL1		;go till last row°±¹³° 	XOR	A°±¹´° 	RET			;no key pressed°±¹µ° INL2	LD	E,A°±¹¶° 	LD	A,D°±¹·° 	RLCA°±¹¸° 	RLCA°±¹¹° 	RLCA°²°°° 	LD	D,A°²°±° 	LD	C,1°²°²° INL3	LD	A,C°²°³° 	AND	E°²°´° 	JR	NZ,INL4		;go if found°²°µ° 	INC	D°²°¶° 	RLC	C°²°·° 	JR	INL3°²°¸° INL4	LD	E,D°²°¹° 	LD	D,0		;DE = location in matrix°²±°° 	LD	HL,KITABLE	;lookup table°²±±° 	ADD	HL,DE		;point to byte°²±²° 	LD	A,(HL)		;fetch it°²±³° 	OR	A°²±´° 	RET°²±µ° KITABLE	DB	'@ABCDEFG'°²±¶° 	DB	'HIJKLMNO'°²±·° 	DB	'PQRSTUVW'°²±¸° 	DB	'XYZ`````'°²±¹° 	DB	'01234567'°²²°° 	DB	'89:+<->?'°²²±° 	DB	13,31,1,5BH,5CH,8,5EH,20H°²²²° KISCAN	LD	A,140°²²³° 	LD	(DE),A°²²´° KISCAN0	PUSH	HL°²²µ° 	PUSH	DE°²²¶° 	PUSH	BC°²²·° 	CALL	INKEY		;check keyboard°²²¸° 	POP	BC°²²¹° 	POP	DE°²³°° 	POP	HL°²³±° 	RET	NZ°²³²° 	PUSH	BC°²³³° 	LD	BC,500H°²³´° DLYCNT	EQU	$-2°²³µ° 	DEC	BC°²³¶° 	LD	(DLYCNT),BC°²³·° 	LD	A,B°²³¸° 	OR	C°²³¹° 	POP	BC°²´°° 	JR	NZ,KISCAN0°²´±° 	PUSH	BC°²´²° 	LD	BC,500H°²´³° 	LD	(DLYCNT),BC°²´´° 	POP	BC°²´µ° 	LD	A,(DE)°²´¶° 	CP	140°²´·° 	JR	NZ,KISCAN°²´¸° 	LD	A,95°²´¹° 	JR	KISCAN+2