ÓHOWTOD°°°±° ;	HOWTODO/ASM°°°²° PREENTRY	DI°°°³° 	LD	SP,STACK°°°´° 	LD	A,0D0H°°°µ° 	OUT	(0F0H),A°°°¶° 	XOR	A°°°·° 	OUT	(0E4H),A°°°¸° 	LD	A,4°°°¹° 	OUT	(0E0H),A°°±°° 	LD	A,20H°°±±° 	OUT	(0ECH),A°°±²° 	IM	1°°±³° 	EI°°±´° 	CALL	CLEARSCR°°±µ° 	CALL	SETUPS°°±¶° 	RST	20H°°±·° 	RST	18H°°±¸° 	RST	8°°±¹° 	DB	1CH,1FH,3°°²°° STARTHERE	RST	8°°²±° 	DB	10,'Distributed by Breeze/QSD, Inc.'°°²²° 	DB	10,'Dallas, Texas  (214) 484-9428'°°²³° 	DB	10,'Licensed to Tandy Corp. - Fort Wort, Texas'°°²´° 	DB	10,10,'Testing Buffer Memory ...',13°°²µ° 	CALL	TESTMEM°°²¶° 	LD	A,H°°²·° 	DEC	HL°°²¸° 	LD	(TMEM1),A°°²¹° 	LD	(TMEM2),A°°³°° 	LD	(TMEM3),A°°³±° 	LD	A,H°°³²° 	PUSH	HL°°³³° 	RST	30H°°³´° 	LD	(TM1),HL°°³µ° 	POP	HL°°³¶° 	LD	A,L°°³·° 	RST	30H°°³¸° 	LD	(TM1+2),HL°°³¹° 	RST	8°°´°° 	DB	10,'Topmem = '°°´±° TM1	DB	'xxxxH.',13°°´²° ENTRY	LD	SP,STACK°°´³° GETSPDS	CALL	SETUPS°°´´° 	RST	8°°´µ° 	DB	1EH,'Step Speed (0=6ms,1=12ms,2=20ms,3=40ms, default 0) ? ',3°°´¶° 	LD	B,1°°´·° 	RST	10H°°´¸° 	LD	A,0°°´¹° 	LD	(SPEED),A°°µ°° 	JR	Z,HSPD°°µ±° 	LD	A,(HL)°°µ²° 	SUB	30H°°µ³° 	JR	C,GETSPDS°°µ´° 	CP	4°°µµ° 	JR	NC,GETSPDS°°µ¶° 	LD	(SPEED),A°°µ·° HSPD	ADD	A,30H°°µ¸° 	LD	(ST81),A°°µ¹° 	RST	20H°°¶°° 	JR	RESME°°¶±° SETUPS	LD	A,'Y'°°¶²° 	LD	(VFLAG),A°°¶³° 	XOR	A		;REQUESTED COPIES°°¶´° 	LD	(SOURCE),A	;DEFAULT SOURCE DRIVE°°¶µ° 	LD	(FINISHED),A	;HOW MANY ARE DONE°°¶¶° 	LD	A,100°°¶·° 	LD	(REQUEST),A	;DEFAULT REQUEST #°°¶¸° 	LD	A,40°°¶¹° 	LD	(TRACKS),A	;DEFAULT TRACKS°°·°° 	LD	HL,DEST		;DESTINATION TABLE°°·±° 	LD	(HL),'N'	;DEFAULT VALUES°°·²° 	INC	HL°°·³° 	LD	(HL),'Y'°°·´° 	INC	HL°°·µ° 	LD	(HL),'Y'°°·¶° 	INC	HL°°··° 	LD	(HL),'Y'°°·¸° 	RST	20H°°·¹° 	JP	18H°°¸°° RESME	RST	18H		;PRINT LINE 2°°¸±° ASKSP	RST	8°°¸²° 	DB	1EH,'S>ingle or D>ouble Density (default double) ? ',3°°¸³° 	LD	B,1°°¸´° 	RST	10H°°¸µ° 	JR	Z,STDISK°°¸¶° 	CALL	UCASE°°¸·° 	CP	'S'°°¸¸° 	JR	Z,STDISK+2°°¸¹° 	CP	'D'°°¹°° 	JR	NZ,ASKSP°°¹±° STDISK	LD	A,'D'°°¹²° 	CP	'D'°°¹³° 	LD	A,80H°°¹´° 	JR	Z,SSTY°°¹µ° 	XOR	A°°¹¶° SSTY	LD	(DENSITY),A°°¹·° 	RST	20H°°¹¸° 	LD	A,(DENSITY)°°¹¹° 	BIT	7,A°±°°° 	JR	Z,X7X8UU°±°±° CKSIZ	RST	8°±°²° 	DB	1EH,'A> Sectors 0-17, B> Sectors 1-18 (default B) ? ',3°±°³° 	LD	B,1°±°´° 	RST	10H°±°µ° 	LD	A,'B'°±°¶° 	JR	Z,HAVSIZ°±°·° 	LD	A,(HL)°±°¸° 	CALL	UCASE°±°¹° 	CP	'A'°±±°° 	JR	Z,HAVSIZ°±±±° 	CP	'B'°±±²° 	JR	NZ,CKSIZ°±±³° HAVSIZ	LD	(SIZE),A°±±´° X7X8UU	CALL	SETUPDEN°±±µ° 	RST	20H°±±¶° X7X8	RST	8°±±·° 	DB	1EH,'How many copies to be made decimal (default 100) ? ',3°±±¸° 	LD	B,3		;ALLOW 3 CHARACTERS°±±¹° 	RST	10H°±²°° 	LD	A,100		;DEFAULT TO 100°±²±° 	JR	Z,HAVECOUNT	;CONTINUE IF DEFAULT°±²²° 	CALL	VALUE		;GET STRING VALUE°±²³° 	JR	C,X7X8		;C=BAD INPUT ELSE BC=NUM.°±²´° 	LD	A,C°±²µ° HAVECOUNT	LD	(REQUEST),A	;SAVE VALUE°±²¶° 	RST	18H		;SHOW ON SCREEN°±²·° ASKTKS	RST	8°±²¸° 	DB	1EH,'Diskette Track Count (default 40) ? ',3°±²¹° 	LD	B,3°±³°° 	RST	10H°±³±° 	LD	A,40°±³²° 	JR	Z,TKSASK°±³³° 	CALL	VALUE°±³´° 	JR	C,ASKTKS°±³µ° 	LD	A,C°±³¶° TKSASK	LD	(TRACKS),A°±³·° 	RST	18H°±³¸° BAD5	RST	8°±³¹° 	DB	1EH,'Byte for byte verify after write (default yes) ? ',3°±´°° 	LD	B,1°±´±° 	RST	10H°±´²° 	JR	Z,VERNO°±´³° 	CALL	UCASE°±´´° 	CP	'N'°±´µ° 	JR	Z,VERNO+2°±´¶° 	CP	'Y'°±´·° 	JR	NZ,BAD5		;INVALID INPUT°±´¸° VERNO	LD	A,'Y'		;DEFAULT°±´¹° 	LD	(VFLAG),A	;VERIFY FLAG°±µ°° 	RST	20H		;PRINT ON SCREEN°±µ±° BAD2	RST	8		;PRINT°±µ²° 	DB	1EH,'Source drive (default 0) ? ',3°±µ³° 	LD	B,1°±µ´° 	RST	10H°±µµ° 	LD	C,0		;DEFAULT 0°±µ¶° 	JR	Z,HAVESRC°±µ·° 	SUB	30H°±µ¸° 	JR	C,BAD2°±µ¹° 	LD	C,A°±¶°° HAVESRC	LD	A,C°±¶±° 	CP	4°±¶²° 	JR	NC,BAD2		;TOO MUCH°±¶³° 	LD	(SOURCE),A	;SAVE BINARY DRIVE°±¶´° 	PUSH	AF°±¶µ° 	LD	HL,LOCKTBL°±¶¶° 	ADD	A,L°±¶·° 	LD	L,A°±¶¸° 	LD	(HL),-1°±¶¹° 	POP	AF°±·°° 	ADD	A,30H		;MAKE ASCII°±·±° 	LD	(SRCDRV),A	;FOR STRING°±·²° 	SUB	30H°±·³° 	CALL	DRVBIT		;SET DRIVE BIT°±·´° 	LD	(SRC),A		;SAVE BIT SET°±·µ° 	XOR	A°±·¶° 	LD	(DESDR),A°±··° 	RST	20H		;SHOW SOURCE DRIVE°±·¸° 	RST	18H°±·¹° DESTLOOP	LD	A,0°±¸°° DESDR	EQU	$-1°±¸±° 	CP	0°±¸²° SOURCE	EQU	$-1°±¸³° 	JR	Z,HAVENO°±¸´° 	ADD	A,30H		;MAKE DRIVE INTO ASCII°±¸µ° 	LD	(INLINE),A	;PUT IN MESSAGE°±¸¶° 	RST	18H°±¸·° 	RST	8		;DISPlay it°±¸¸° 	DB	1EH,'Copy to drive '°±¸¹° INLINE	DB	'0 (default yes) ? ',3°±¹°° 	LD	B,1°±¹±° 	RST	10H°±¹²° 	JR	Z,HAVENOX	;GO IF NO INPUT°±¹³° 	CALL	UCASE°±¹´° 	CP	'Y'		;YES ?°±¹µ° 	JR	Z,HAVEIF	;GO IF YES°±¹¶° 	CP	'N'		;NO ?°±¹·° 	JR	NZ,DESTLOOP	;BAD INPUT IF NOT Y/N°±¹¸° 	JR	HAVEIF°±¹¹° HAVENO	LD	A,'N'°²°°° 	JR	HAVEIF°²°±° HAVENOX	LD	A,'Y'°²°²° HAVEIF	LD	HL,DEST		;DESTINATION TABLE°²°³° 	LD	E,A		;SAVE RESPONSE°²°´° 	LD	A,(DESDR)	;GET DRIVE°²°µ° 	ADD	A,L°²°¶° 	LD	L,A°²°·° 	LD	(HL),E°²°¸° 	LD	A,(DESDR)°²°¹° 	INC	A°²±°° 	LD	(DESDR),A°²±±° 	CP	4°²±²° 	JR	C,DESTLOOP	;CONTINUE IF NOT END°²±³° 	LD	A,99°²±´° 	LD	(OKCONT),A°²±µ° 	LD	HL,DEST		;POINT TO TABLE°²±¶° 	LD	A,(SOURCE)°²±·° 	ADD	A,L		;POINT TO DEST BYTE°²±¸° 	LD	L,A°²±¹° 	LD	A,(HL)		;GET DEST BYTE°²²°° 	CP	'Y'		;SOURCE & DEST THE SAME ?°²²±° 	JR	NZ,START	;START COPY IF NOT SAME°²²²° 	RST	8		;MESSAGE°²²³° 	DB	1EH,'Source & Destination same drive !',13°²²´° 	JP	BAD2		;START AGAIN°²²µ° START	LD	SP,STACK	;RESET STACK FROM BREAK°²²¶° 	LD	A,0°²²·° OKCONT	EQU	$-1°²²¸° 	CP	99°²²¹° 	JP	NZ,ENTRY°²³°° 	RST	20H		;TITLE°²³±° 	RST	18H		;HOWMANY COPIES°²³²° 	RST	8		;MESSAGE°²³³° 	DB	1EH,'Mount all disks, press <ENTER>. ',3°²³´° 	LD	B,1°²³µ° 	RST	10H°²³¶° 	XOR	A		;START WITH TRACK 0°²³·° 	SBC	HL,HL°²³¸° 	LD	(TRACK),A	;SAVE IT°²³¹° 	LD	(DESDR),A	;DESTINATION COUNT°²´°° 	LD	(LOCKTBL),HL	;SET ALL DRIVES AS OK°²´±° 	LD	(LOCKTBL+2),HL°²´²° 	LD	(PLACE),HL	;PLACE OF NEXT READ°²´³° 	LD	HL,DEST°²´´° 	LD	B,4°²´µ° 	LD	A,(DENSITY)°²´¶° 	OR	A°²´·° 	JR	Z,CHKLP°²´¸° 	LD	A,'A'°²´¹° SIZE	EQU	$-1°²µ°° 	CP	'A'°²µ±° 	JR	Z,CHKLP°²µ²° 	LD	A,1°²µ³° 	LD	(PLACE),A°²µ´° CHKLP	LD	A,(HL)°²µµ° 	CP	'Y'°²µ¶° 	JR	Z,FORMAT°²µ·° 	INC	HL°²µ¸° 	DJNZ	CHKLP°²µ¹° 	RST	8°²¶°° 	DB	1EH,'NO DESTINATION DRIVES.  Press <ENTER> to continue. ',3°²¶±° 	LD	B,1°²¶²° 	RST	10H°²¶³° 	JP	ENTRY°²¶´° FORMAT	LD	HL,DEST		;POINT TO TABLE°²¶µ° 	LD	IY,TRACKS°²¶¶° 	LD	A,(DESDR)	;GET COUNT°²¶·° 	ADD	A,L		;POINT TO DES DRIVE°²¶¸° 	LD	L,A°²¶¹° 	LD	A,(HL)		;GET A BYTE°²·°° 	CP	'Y'		;COPY TO THAT ONE ?°²·±° 	JR	NZ,FMTNEXT	;SKIP IF NOT "Y"°²·²° 	LD	A,(DESDR)	;DRIVE COUNT°²·³° 	LD	(DRIVE),A	;SAVE BINARY°²·´° 	CALL	DRVBIT		;SET BIT FOR DRIVE SELECT°²·µ° 	LD	(DRIV),A	;SAVE THAT°²·¶° 	CALL	STATCK°²··° 	JR	NZ,FMTNOGOOD°²·¸° 	LD	D,0°²·¹° 	CALL	RESTORE		;RESTORE THE DRIVE°²¸°° 	JR	NZ,FMTNOGOOD°²¸±° 	XOR	A		;START WITH TRACK 0°²¸²° 	LD	(TRACK),A	;FOR FORMAT°²¸³° 	CALL	FORM		;FORMAT THE DISK°²¸´° 	JR	Z,FMTNEXT°²¸µ° FMTNOGOOD°²¸¶° 	CALL	BADWRT°²¸·° FMTNEXT	LD	A,(DESDR)	;GET COUNTER°²¸¸° 	INC	A		;BUMP IT°²¸¹° 	LD	(DESDR),A	;RE-SAVE IT°²¹°° 	CP	4		;END OF TABLE ?°²¹±° 	JR	C,FORMAT	;CONTINUE IF NOT°²¹²° 	XOR	A		;ZERO TRACK AGAIN°²¹³° 	LD	(TRACK),A	;SAVE IT°²¹´° 	CALL	RESTOREALL	;RESTORE ALL DRIVES & TBL°²¹µ° 	LD	IY,TRACKS	;POINT TO TRACK COUNT°²¹¶° COPY	LD	A,(SOURCE)	;SOURCE DRIVE°²¹·° 	LD	(DRIVE),A°²¹¸° 	LD	A,0°²¹¹° SRC	EQU	$-1°³°°° 	LD	(DRIV),A°³°±° 	LD	DE,0°³°²° PLACE	EQU	$-2°³°³° 	LD	(TRAK),DE	;SAVE FOR WRITE°³°´° 	CALL	MREAD		;MULTIPLE SECTOR READ°³°µ° 	LD	(PLACE),DE°³°¶° 	XOR	A		;FOR TABLE°³°·° 	LD	(DESDR),A	;ZERO IT°³°¸° CPYLOOP	LD	HL,DEST		;DESTINATION TABLE°³°¹° 	LD	A,(DESDR)°³±°° 	ADD	A,L°³±±° 	LD	L,A°³±²° 	LD	A,(HL)°³±³° 	CP	'Y'°³±´° 	JR	NZ,CPYNEXT	;SKIP IF NOT YES°³±µ° 	LD	A,(DESDR)°³±¶° 	LD	(DRIVE),A	;BINARY DRIVE°³±·° 	CALL	DRVBIT		;SET DRIVE BIT°³±¸° 	LD	(DRIV),A°³±¹° 	LD	DE,(TRAK)	;GET TRACK°³²°° 	CALL	MWRITE		;MULTIPLE WRITE°³²±° 	LD	A,'N'°³²²° VFLAG	EQU	$-1°³²³° 	CP	'Y'°³²´° 	CALL	Z,VERIFY	;DO IT IF YES°³²µ° CPYNEXT	LD	A,(DESDR)°³²¶° 	INC	A°³²·° 	LD	(DESDR),A°³²¸° 	CP	4°³²¹° 	JR	C,CPYLOOP	;GO LOOP°³³°° 	LD	A,(PLACE+1)	;GET CURRENT TRACK°³³±° 	CP	(IY)		;END ?°³³²° 	JP	NZ,COPY		;CONTINUE°³³³° 	RST	8°³³´° 	DB	13		;CARRIAGE RETURN°³³µ° 	LD	HL,(CURSOR)	;GET CURSOR°³³¶° 	PUSH	HL		;GIVE TO DE°³³·° 	POP	DE°³³¸° 	INC	DE		;CURSOR +1°³³¹° 	LD	(HL),140	;GRAPHIC BLOCK°³´°° 	LD	BC,63°³´±° 	LDIR			;DRAW LINE°³´²° 	RST	8		;DROP ANOTHER LINE°³´³° 	DB	13°³´´° 	LD	HL,LOCKTBL	;LOCKOUT TABLE°³´µ° 	LD	DE,DEST		;DESTINATION TABLE°³´¶° 	LD	B,4		;GO FOR 4 DRIVES°³´·° 	LD	C,30H		;ASCII DRIVE°³´¸° CHKMANY	LD	A,(DE)		;ACTIVE DRIVE ?°³´¹° 	CP	'Y'°³µ°° 	JR	NZ,CHKNEXT	;CONTINUE IF NOT°³µ±° 	LD	A,(HL)		;GET LOCKOUT BYTE°³µ²° 	OR	A		;SET FLAGS°³µ³° 	JP	NZ,CHKBAD	;FAULTY°³µ´° 	LD	A,0°³µµ° FINISHED	EQU	$-1°³µ¶° 	INC	A°³µ·° 	LD	(FINISHED),A°³µ¸° 	LD	A,C°³µ¹° 	LD	(GOODDRV),A°³¶°° 	PUSH	HL°³¶±° 	PUSH	DE°³¶²° 	RST	8°³¶³° 	DB	10,'Drive '°³¶´° GOODDRV	DB	'0 Copied OK.',3°³¶µ° 	POP	DE°³¶¶° 	POP	HL°³¶·° CHKNEXT	INC	HL		;BUMP POINTERS°³¶¸° 	INC	DE°³¶¹° 	INC	C°³·°° 	DJNZ	CHKMANY°³·±° 	JP	COPYBYE		;DONE°³·²° CHKBAD	LD	A,C		;GET DRIVE ASCII°³·³° 	LD	(BADDRV),A	;PUT IN STRING°³·´° 	PUSH	HL°³·µ° 	PUSH	DE°³·¶° 	RST	8		;DISPLAY MESSAGE°³··° 	DB	10,'DO NOT USE Drive '°³·¸° BADDRV	DB	'0, BAD COPY.',3°³·¹° 	POP	DE°³¸°° 	POP	HL°³¸±° 	JP	CHKNEXT°³¸²° DRVBIT	PUSH	DE		;SAVE DE°³¸³° 	LD	E,1		;BIT 0°³¸´° BITLOOP	OR	A		;CHECK IF 0°³¸µ° 	JR	Z,BITFND	;FOUND IF 0°³¸¶° 	DEC	A		;DRIVE -1°³¸·° 	SLA	E		;MOVE DRIVE BIT°³¸¸° 	JR	BITLOOP		;CONTINUE°³¸¹° BITFND	LD	A,E		;GET BIT°³¹°° 	POP	DE		;RESTORE DE°³¹±° 	RET			;DONE°³¹²° CLEARSCR	LD	HL,3C00H	;VIDEO°³¹³° 	LD	DE,3C01H°³¹´° 	LD	BC,1023°³¹µ° 	LD	(HL),20H	;SPACE°³¹¶° 	LDIR			;CLEAR SCREEN°³¹·° 	LD	HL,3C80H°³¹¸° 	LD	DE,3C81H°³¹¹° 	LD	BC,63°´°°° 	LD	(HL),140°´°±° 	LDIR°´°²° 	LD	HL,3CC0H°´°³° 	LD	(CURSOR),HL°´°´° 	RET			;DONE°´°µ° MSG0	DB	'MULTI-DISK COPY III by Kim Watt - Density='°´°¶° DEN	DB	'xx, Source='°´°·° SRCDRV	DB	'0, Verify='°´°¸° VERON	DB	'Y'°´°¹° HOWMANY	LD	A,100°´±°° REQUEST	EQU	$-1°´±±° 	RST	28H		;MAKE IT ASCII°´±²° 	LD	(MANY1),A	;PUT IN STRING°´±³° 	LD	(MANY1+1),BC°´±´° 	LD	A,(FINISHED)	;HOW MANY DONE°´±µ° 	RST	28H		;MAKE IT ASCII TOO°´±¶° 	LD	(MANY2),A°´±·° 	LD	(MANY2+1),BC	;PUT IN STRING°´±¸° 	LD	A,40°´±¹° TRACKS	EQU	$-1°´²°° 	RST	28H°´²±° 	LD	(MANY3),A°´²²° 	LD	(MANY3+1),BC°´²³° 	LD	HL,DEST°´²´° 	LD	A,(HL)°´²µ° 	LD	(DRV1),A°´²¶° 	INC	HL°´²·° 	LD	A,(HL)°´²¸° 	LD	(DRV2),A°´²¹° 	INC	HL°´³°° 	LD	A,(HL)°´³±° 	LD	(DRV3),A°´³²° 	INC	HL°´³³° 	LD	A,(HL)°´³´° 	LD	(DRV4),A°´³µ° 	LD	HL,MSG1		;POINT TO MESSAGE°´³¶° 	LD	DE,3C40H	;VIDEO LINE 2°´³·° 	LD	B,64		;64 CHARS°´³¸° 	JP	PUTITON		;PRINT IT°´³¹° MSG1	DB	'Step='°´´°° ST81	DB	'0, Req='°´´±° MANY1	DB	'000, Done='°´´²° MANY2	DB	'000, Tracks='°´´³° MANY3	DB	'000. Dest 0='°´´´° DRV1	DB	'N, 1='°´´µ° DRV2	DB	'Y, 2='°´´¶° DRV3	DB	'Y, 3='°´´·° DRV4	DB	'Y    '°´´¸° FORM	LD	A,(DRIVE)	;GET BINARY DRIVE°´´¹° 	ADD	A,30H		;MAKE IT ASCII°´µ°° 	LD	(FMTDRV),A	;PUT IN STRING°´µ±° 	RST	8		;ONE CARRIAGE RETURN°´µ²° 	DB	13°´µ³° FORMLP	LD	A,0°´µ´° TRACK	EQU	$-1°´µµ° 	RST	28H		;MAKE IT ASCII°´µ¶° 	LD	(FMTTRK),A	;PUT IN STRING°´µ·° 	LD	(FMTTRK+1),BC°´µ¸° 	RST	8°´µ¹° 	DB	1DH		;BEGINNING OF LINE°´¶°° 	DB	'Formatting - Drive '°´¶±° FMTDRV	DB	'0, Track '°´¶²° FMTTRK	DB	'000.',3°´¶³° 	LD	IY,TRACKS°´¶´° 	CALL	FORMIT°´¶µ° 	JP	NZ,BADWRTX0°´¶¶° 	LD	A,(TRACK)	;GET TRACK°´¶·° 	INC	A		;BUMP IT°´¶¸° 	LD	(TRACK),A	;SAVE IT°´¶¹° 	CP	(IY)		;END OF DISK ?°´·°° 	RET	Z		;FINISHED IF YES°´·±° 	CALL	STEPIN		;STEP IN DRIVE°´·²° 	JP	NZ,BADWRTX1°´·³° 	JP	FORMLP		;GO LOOP°´·´° RESTOREALL	XOR	A	;START WITH 0°´·µ° 	LD	(DESDR),A	;SAVE IT°´·¶° 	LD	HL,0		;ZERO THE TRACK TABLE°´··° 	LD	(CTRACK),HL°´·¸° 	LD	(CTRACK+2),HL°´·¹° 	RST	8°´¸°° 	DB	13°´¸±° 	RET°´¸²° MREAD	RST	8°´¸³° 	DB	13°´¸´° 	LD	A,(DRIVE)°´¸µ° 	ADD	A,30H°´¸¶° 	LD	(RDDR),A°´¸·° 	LD	A,D°´¸¸° 	RST	28H°´¸¹° 	LD	(RDTK),A°´¹°° 	LD	(RDTK+1),BC°´¹±° 	LD	BC,BUFFER°´¹²° 	LD	IX,POINTER	;TO SAVE READ TYPE°´¹³° READLP	PUSH	BC		;SAVE BUFFER°´¹´° 	LD	A,B°´¹µ° 	RST	30H°´¹¶° 	LD	(BUFF1),HL°´¹·° 	LD	A,E°´¹¸° 	RST	28H°´¹¹° 	LD	(RDSC),A°µ°°° 	LD	(RDSC+1),BC°µ°±° 	RST	8°µ°²° 	DB	1DH,'Reading   Drive '°µ°³° RDDR	DB	'0, Track '°µ°´° RDTK	DB	'000, Sector '°µ°µ° RDSC	DB	'000, Buffer '°µ°¶° BUFF1	DB	'0000H.',3°µ°·° 	POP	BC		;LOAD ADDRESS°µ°¸° 	CALL	READ°µ°¹° 	JR	NZ,STOP-1	;QUIT IF READ ERROR°µ±°° 	LD	A,0°µ±±° RESULT	EQU	$-1°µ±²° 	RRCA°µ±³° 	RRCA°µ±´° 	RRCA°µ±µ° 	RRCA°µ±¶° 	RRCA°µ±·° 	AND	1°µ±¸° 	OR	0A0H°µ±¹° 	LD	(IX),A		;SAVE IN TABLE°µ²°° 	INC	IX°µ²±° 	INC	E		;BUMP SECTOR°µ²²° 	LD	A,E		;GET INTO ACCUM°µ²³° 	SUB	0AH		;END OF TRACK ?°µ²´° DD11	EQU	$-1°µ²µ° 	JR	NZ,READEN	;NOPE°µ²¶° 	LD	E,0°µ²·° DD01	EQU	$-1°µ²¸° 	INC	D		;BUMP TRACK°µ²¹° 	PUSH	BC°µ³°° 	LD	A,D°µ³±° 	RST	28H°µ³²° 	LD	(RDTK),A°µ³³° 	LD	(RDTK+1),BC°µ³´° 	POP	BC°µ³µ° READEN	LD	A,B		;GET BUFFER POINTER°µ³¶° 	CP	0		;end of memory?°µ³·° TMEM1	EQU	$-1°µ³¸° 	RET	Z°µ³¹° 	LD	A,D		;GET TRACK°µ´°° 	CP	(IY)		;AT END ?°µ´±° 	RET	NC°µ´²° 	JP	READLP°µ´³° 	EX	AF,AF'°µ´´° STOP	EX	AF,AF'°µ´µ° 	RST	30H°µ´¶° 	LD	(ERCD),HL°µ´·° 	RST	8°µ´¸° 	DB	10,'Read Error Code = '°µ´¹° ERCD	DB	'xxH.'°µµ°° 	DB	10,'Cannot continue - Source Read Error.',13°µµ±° STOP2	RST	8°µµ²° 	DB	10,'Key <ENTER> to restart. ',3°µµ³° 	LD	B,1°µµ´° 	RST	10H°µµµ° 	LD	A,(REQUEST)°µµ¶° 	LD	B,A°µµ·° 	LD	A,(FINISHED)°µµ¸° 	CP	B°µµ¹° 	JP	C,START°µ¶°° 	JP	ENTRY°µ¶±° STOP3	RST	8°µ¶²° 	DB	10,'No Destination Drives !',13°µ¶³° 	JR	STOP2°µ¶´° VERIFY	LD	HL,LOCKTBL	;SEE IF USING DRIVE°µ¶µ° 	LD	A,(DRIVE)°µ¶¶° 	ADD	A,L°µ¶·° 	LD	L,A°µ¶¸° 	LD	A,(HL)		;LOCKED OUT ?°µ¶¹° 	OR	A°µ·°° 	RET	NZ°µ·±° 	LD	BC,BUFFER	;READ BUFFER°µ·²° 	LD	(BPOINT),BC	;SAVE IN BUFFER POINTER°µ·³° 	LD	A,(DRIVE)°µ·´° 	ADD	A,30H		;MAKE IT ASCII°µ·µ° 	LD	(VDR),A°µ·¶° 	RST	8°µ··° 	DB	13°µ·¸° 	LD	DE,0°µ·¹° TRAK	EQU	$-2°µ¸°° 	LD	A,D°µ¸±° 	RST	28H°µ¸²° 	LD	(VRTK),A°µ¸³° 	LD	(VRTK+1),BC°µ¸´° 	LD	IX,POINTER	;READ TYPE POINTER°µ¸µ° VERLOOP	LD	BC,0°µ¸¶° BPOINT	EQU	$-2°µ¸·° 	LD	A,B		;GET BUFFER°µ¸¸° 	RST	30H		;HEX ASCII°µ¸¹° 	LD	(BUFF5),HL	;TO STRING°µ¹°° 	LD	A,E		;GET SECTOR°µ¹±° 	RST	28H°µ¹²° 	LD	(VSC),A°µ¹³° 	LD	(VSC+1),BC°µ¹´° 	RST	8°µ¹µ° 	DB	1DH°µ¹¶° 	DB	'Verifying Drive '°µ¹·° VDR	DB	'0, Track '°µ¹¸° VRTK	DB	'000, Sector '°µ¹¹° VSC	DB	'000, Buffer '°¶°°° BUFF5	DB	'0000H.',3°¶°±° 	LD	BC,VERBUFF	;VERIFY READ BUFFER°¶°²° 	CALL	READ°¶°³° 	JP	NZ,BADWRTX2	;LOCKOUT THE DRIVE°¶°´° 	LD	A,(RESULT)	;GET READ RESULT°¶°µ° 	RRCA°¶°¶° 	RRCA°¶°·° 	RRCA°¶°¸° 	RRCA°¶°¹° 	RRCA°¶±°° 	AND	1°¶±±° 	OR	0A0H°¶±²° 	CP	(IX)		;SAME ?°¶±³° 	INC	IX°¶±´° 	JP	NZ,BADWRTX3	;LOCKOUT THE DRIVE°¶±µ° 	LD	HL,(BPOINT)	;GET BUFFER POINTER°¶±¶° 	PUSH	DE		;SAVE TRACK/SECTOR°¶±·° 	LD	DE,VERBUFF	;VERIFY BUFFER°¶±¸° 	LD	B,0		;1 SECTOR°¶±¹° 	CALL	COMPARE		;COMPARE 'EM°¶²°° 	POP	DE°¶²±° 	JP	NZ,BADWRTX4	;LOCKOUT THE DRIVE°¶²²° VERIFGO	LD	HL,(BPOINT)	;BUMP IT°¶²³° 	INC	H°¶²´° 	LD	(BPOINT),HL	;PUT IT BACK°¶²µ° 	INC	E		;BUMP SECTOR°¶²¶° 	LD	A,E°¶²·° 	SUB	0AH°¶²¸° DD12	EQU	$-1°¶²¹° 	JR	NZ,VERCONT	;CONTINUE IF NOT AT END°¶³°° 	LD	E,0°¶³±° DD02	EQU	$-1°¶³²° 	INC	D°¶³³° 	LD	A,D		;GET TRACK°¶³´° 	RST	28H°¶³µ° 	LD	(VRTK),A°¶³¶° 	LD	(VRTK+1),BC°¶³·° VERCONT	LD	BC,(BPOINT)	;GET BUFFER POINTER°¶³¸° 	LD	A,B		;GET MSB°¶³¹° 	CP	0°¶´°° TMEM2	EQU	$-1°¶´±° 	RET	Z°¶´²° 	LD	A,D		;GET TRACK°¶´³° 	CP	(IY)		;AT END ?°¶´´° 	RET	NC°¶´µ° 	JP	VERLOOP		;GO LOOP°¶´¶° COMPARE	LD	A,(DE)		;GET A BYTE°¶´·° 	CP	(HL)		;SAME ?°¶´¸° 	RET	NZ		;NOPE IF NZ°¶´¹° 	INC	HL°¶µ°° 	INC	DE		;BUMP POINTERS°¶µ±° 	DJNZ	COMPARE		;CONTINUE 100H BYTES°¶µ²° 	RET			;Z FLAG SET°¶µ³° MWRITE	LD	HL,LOCKTBL	;POINT TO LOCK TABLE°¶µ´° 	LD	A,(DRIVE)	;BINARY DRIVE°¶µµ° 	ADD	A,L°¶µ¶° 	LD	L,A°¶µ·° 	LD	A,(HL)		;IS DRIVE LOCKED OUT ?°¶µ¸° 	OR	A°¶µ¹° 	RET	NZ		;QUIT IF FAULTY DRIVE°¶¶°° 	LD	A,(DRIVE)°¶¶±° 	ADD	A,30H°¶¶²° 	LD	(WDR),A°¶¶³° 	RST	8°¶¶´° 	DB	13°¶¶µ° 	LD	A,D°¶¶¶° 	RST	28H°¶¶·° 	LD	(WRTK),A°¶¶¸° 	LD	(WRTK+1),BC°¶¶¹° 	LD	BC,BUFFER	;POINT TO BUFFER°¶·°° 	LD	IX,POINTER	;FOR WRITE TYPE°¶·±° WRITELP	LD	A,(IX)		;GET TABLE BYTE°¶·²° 	INC	IX		;BUMP POINTER°¶·³° 	LD	(TYPE),A	;SAVE IN CODE°¶·´° 	PUSH	BC°¶·µ° 	LD	A,B°¶·¶° 	RST	30H°¶··° 	LD	(BUFF3),HL°¶·¸° 	LD	A,E°¶·¹° 	RST	28H°¶¸°° 	LD	(WRSC),A°¶¸±° 	LD	(WRSC+1),BC°¶¸²° 	RST	8°¶¸³° 	DB	1DH°¶¸´° 	DB	'Writing   Drive '°¶¸µ° WDR	DB	'0, Track '°¶¸¶° WRTK	DB	'000, Sector '°¶¸·° WRSC	DB	'000, Buffer '°¶¸¸° BUFF3	DB	'0000H.',3°¶¸¹° 	POP	BC°¶¹°° 	CALL	WRITE°¶¹±° 	JP	NZ,BADWRTX5	;NZ=BAD°¶¹²° 	INC	E		;BUMP SECTOR°¶¹³° 	LD	A,E°¶¹´° 	SUB	0AH		;END OF TRACK ?°¶¹µ° DD13	EQU	$-1°¶¹¶° 	JR	NZ,WRITEEN°¶¹·° 	LD	E,0°¶¹¸° DD03	EQU	$-1°¶¹¹° 	INC	D		;BUMP TRACK°·°°° 	PUSH	BC°·°±° 	LD	A,D°·°²° 	RST	28H°·°³° 	LD	(WRTK),A°·°´° 	LD	(WRTK+1),BC°·°µ° 	POP	BC°·°¶° WRITEEN	LD	A,B		;GET BUFFER POINTER°·°·° 	CP	0°·°¸° TMEM3	EQU	$-1°·°¹° 	RET	Z°·±°° 	LD	A,D		;GET TRACK°·±±° 	CP	(IY)		;END OF DISK ?°·±²° 	RET	NC°·±³° 	JP	WRITELP		;ELSE CONTINUE°·±´° BADWRT	LD	HL,LOCKTBL	;LOCKOUT THE DRIVE°·±µ° 	LD	A,(DRIVE)°·±¶° 	ADD	A,L°·±·° 	LD	L,A°·±¸° 	LD	(HL),-1		;LOCK IT OUT°·±¹° 	LD	A,(DRIVE)°·²°° 	ADD	A,30H°·²±° 	LD	(BADDR),A°·²²° 	RST	8°·²³° 	DB	10,'Drive '°·²´° BADDR	DB	'0 LOCKED OUT !',13°·²µ° 	PUSH	HL°·²¶° 	LD	HL,LOCKTBL°·²·° 	PUSH	BC°·²¸° 	LD	B,4°·²¹° CKDRL	LD	A,(HL)°·³°° 	INC	A°·³±° 	JR	NZ,CKDRO°·³²° 	INC	HL°·³³° 	DJNZ	CKDRL°·³´° 	POP	BC°·³µ° 	POP	HL°·³¶° 	JP	STOP3°·³·° CKDRO	POP	BC°·³¸° 	POP	HL°·³¹° 	OR	1°·´°° 	RET°·´±° COPYBYE	RST	8		;MESSAGE°·´²° 	DB	13		;CARRIAGE RETURN°·´³° 	RST	18H		;UPDATE # OF COPIES°·´´° 	LD	A,(REQUEST)	;GET REQUEST #°·´µ° 	LD	B,A°·´¶° 	LD	A,(FINISHED)	;HOW MANY DONE°·´·° 	CP	B		;DONE YET ?°·´¸° 	JP	C,START		;MOUNT DISKETTES°·´¹° 	RST	8		;DISPLAY DONE MESSG°·µ°° 	DB	10,'All copies finished.  <ENTER> to restart. ',3°·µ±° 	LD	B,1°·µ²° 	RST	10H°·µ³° 	JP	ENTRY°·µ´° ASCII	PUSH	HL		;SAVE IT°·µµ° 	CALL	ASCI		;CONVERT LOW PART°·µ¶° 	LD	H,B°·µ·° 	PUSH	HL°·µ¸° 	LD	A,C°·µ¹° 	SUB	30H°·¶°° 	CALL	ASCI		;CONVERT HIGH PART°·¶±° 	LD	A,C°·¶²° 	POP	HL°·¶³° 	LD	C,B°·¶´° 	LD	B,H°·¶µ° 	POP	HL°·¶¶° 	RET°·¶·° ASCI	LD	C,30H°·¶¸° ASCII1	SUB	0AH°·¶¹° 	JR	C,ASCII2°··°° 	INC	C°··±° 	JR	ASCII1°··²° ASCII2	ADD	A,3AH°··³° 	LD	B,A°··´° 	RET°··µ° PTITLE	LD	A,(VFLAG)°··¶° 	LD	(VERON),A°···° 	LD	A,(DENSITY)°··¸° 	OR	A°··¹° 	LD	B,' '°·¸°° 	LD	C,'S'°·¸±° 	JR	Z,DENHAV°·¸²° 	LD	C,'D'°·¸³° 	LD	A,(SIZE)°·¸´° 	LD	B,A°·¸µ° DENHAV	LD	(DEN),BC°·¸¶° 	LD	HL,MSG0°·¸·° 	LD	DE,3C00H°·¸¸° 	LD	B,64°·¸¹° 	JP	PUTITON°·¹°° VALUE	LD	A,B		;LENGTH°·¹±° 	CP	3		;MAKE IT 3 BYTES°·¹²° 	JR	Z,VALGO		;HAVE 3 CHAR°·¹³° 	DEC	HL		;POINTER°·¹´° 	LD	(HL),'0'	;MAKE IT ZERO°·¹µ° 	INC	B		;LENGTH + 1°·¹¶° 	JR	VALUE		;CONTINUE°·¹·° VALGO	LD	D,0		;0 START VALUE°·¹¸° VALOOP	LD	A,(HL)		;GET A BYTE°·¹¹° 	CALL	MAKNUM°¸°°° 	RET	C		;BAD NUMBER°¸°±° 	CALL	BYTEN		;A * 10°¸°²° 	CALL	BYTEN		;A * 100°¸°³° 	ADD	A,D		;ADD TO TOTAL°¸°´° 	LD	D,A°¸°µ° 	INC	HL°¸°¶° 	LD	A,(HL)°¸°·° 	CALL	MAKNUM°¸°¸° 	RET	C°¸°¹° 	CALL	BYTEN		;A * 10°¸±°° 	ADD	A,D		;RESULT°¸±±° 	LD	D,A°¸±²° 	INC	HL°¸±³° 	LD	A,(HL)°¸±´° 	CALL	MAKNUM°¸±µ° 	ADD	A,D°¸±¶° 	LD	C,A°¸±·° 	LD	B,0		;BC=RESULT°¸±¸° 	SCF°¸±¹° 	CCF			;CLEAR CARRY°¸²°° 	RET°¸²±° BYTEN	LD	B,10		;MULTIPLIER°¸²²° 	PUSH	DE		;SAVE DE°¸²³° 	LD	E,A°¸²´° 	LD	D,0		;DE=MULTIPLICAND°¸²µ° 	PUSH	HL		;SAVE POINTER°¸²¶° 	LD	HL,0		;START VALUE°¸²·° BYLOOP	SRL	B		;MULTIPLIER BIT°¸²¸° 	JR	NC,BYCONT	;GO IF EVEN NUMBER°¸²¹° 	ADD	HL,DE		;ADD TO TOTAL°¸³°° BYCONT	JR	Z,BYDONE°¸³±° 	EX	DE,HL°¸³²° 	ADD	HL,HL°¸³³° 	EX	DE,HL°¸³´° 	JR	BYLOOP		;CONTINUE°¸³µ° BYDONE	LD	A,L		;GET PRODUCT°¸³¶° 	POP	HL°¸³·° 	POP	DE		;RESTORE PREVIOUS°¸³¸° 	RET			;A=NUMBER°¸³¹° MAKNUM	SUB	30H		;REMOVE ASCII°¸´°° 	RET	C		;BAD NUMBER°¸´±° 	CP	0AH		;>9 ?°¸´²° 	CCF			;REVERSE CARRY FLAG°¸´³° 	RET			;FINISHED°¸´´° HEXCV	LD	C,A°¸´µ° 	SRL	A°¸´¶° 	SRL	A°¸´·° 	SRL	A°¸´¸° 	SRL	A°¸´¹° 	CALL	HEXTST°¸µ°° 	LD	L,A°¸µ±° 	LD	A,C°¸µ²° 	AND	0FH°¸µ³° 	CALL	HEXTST°¸µ´° 	LD	H,A°¸µµ° 	RET°¸µ¶° HEXTST	ADD	A,30H°¸µ·° 	CP	3AH°¸µ¸° 	RET	M°¸µ¹° 	ADD	A,7°¸¶°° 	RET°¸¶±° PUTITON	EX	DE,HL		;HL=VIDEO, DE=TEXT°¸¶²° PUTITLP	LD	A,(DE)		;GET A TEXT BYTE°¸¶³° 	LD	(HL),A		;PRINT IT°¸¶´° 	INC	HL		;BUMP POINTERS°¸¶µ° 	INC	DE°¸¶¶° 	DJNZ	PUTITLP		;CONTINUE°¸¶·° 	RET			;DONE°¸¶¸° ADDC	INC	C°¸¶¹° 	LD	A,7°¸·°° 	ADD	A,B°¸·±° 	LD	B,A°¸·²° 	RET°¸·³° SETUPDEN	LD	A,(DENSITY)°¸·´° 	OR	A°¸·µ° 	LD	B,0°¸·¶° 	JR	NZ,SETDBL°¸··° 	LD	A,10°¸·¸° SETDDD	LD	(DD11),A°¸·¹° 	LD	(DD12),A°¸¸°° 	LD	(DD13),A°¸¸±° 	LD	A,B°¸¸²° 	LD	(DD01),A°¸¸³° 	LD	(DD02),A°¸¸´° 	LD	(DD03),A°¸¸µ° 	RET°¸¸¶° SETDBL	LD	A,(SIZE)°¸¸·° 	CP	'A'°¸¸¸° 	LD	A,19°¸¸¹° 	LD	B,1°¸¹°° 	JR	NZ,SETDDD°¸¹±° 	LD	A,18°¸¹²° 	LD	B,0°¸¹³° 	JR	SETDDD°¸¹´° TESTMEM	LD	HL,TESTBUFF°¸¹µ° TESTLP1	LD	A,-1°¸¹¶° 	LD	(HL),A°¸¹·° 	CP	(HL)°¸¹¸° 	RET	NZ°¸¹¹° 	XOR	A°¹°°° 	LD	(HL),A°¹°±° 	CP	(HL)°¹°²° 	RET	NZ°¹°³° 	INC	HL°¹°´° 	JR	TESTLP1